<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
	   http://www.springframework.org/schema/task  
	   http://www.springframework.org/schema/task/spring-task-3.1.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd   
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd   
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- task任务扫描注解 -->
	<task:annotation-driven />
	
	<!-- 配置工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="configLocation" value="classpath:mybatis.cfg.xml"></property>  -->
		
		<!-- 以下配置可以省略mybatis配置文件了  -->
		<property name="mapperLocations" value="classpath*:/**/*Mapper.xml"/>
		<property name="plugins">
			<array>
			    <!-- 绑定 request 到sql -->
				<bean class="com.ssm.core.interceptor.RequestContextInterceptor"/>
				<!-- 多语言配置拦截器     -->
				<bean class="com.ssm.core.interceptor.MultiLanguageInterceptor" />
				<bean class="com.github.pagehelper.PageHelper"/>
			</array>
		</property>
	</bean>

	<!-- 配置声明式事务 -->
	<!-- 事务管理器  @Transactional回滚事物   -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource" />
	</bean> 

<!--  	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<aop:config expose-proxy="true">
		<aop:pointcut expression="execution(* *..*ServiceImpl.*(..))" id="pointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut" />
	</aop:config>  -->
	
	<!-- 由于spring AOP动态代理默认是通过接口，所以注入事务层的地方都要通过接口进行注入，如果通过实现类进行注入 :需要proxy-target-class="true",但invoke得到到的method是impl方法,而不是interface -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="false"/> 

	<!-- 扫描注解 -->
	<context:component-scan base-package="**.*.service"/>
	<context:component-scan base-package="**.*.components"/>

	<!-- 拦截器ServiceExecutionAdvice,处理@StdWho等自动填充及多语言处理   -->
	<bean id="requestAD" class="com.ssm.core.impl.ServiceExecutionAdvice"/>
	
	<aop:config expose-proxy="true" >
        <aop:pointcut id="servicePointcut" expression="execution(* *..*ServiceImpl.*(..))"/>
        <aop:advisor advice-ref="requestAD" pointcut-ref="servicePointcut"/>
    </aop:config>
	
	<bean id="cookieHttpSessionStrategy"
		class="org.springframework.session.web.http.CookieHttpSessionStrategy">
		<property name="cookieName" value="SESSIONID_HAP" />
	</bean>

	<!-- 这里的是为了下面的 Session策略过滤器提供构造函数传入的参数，因为Session过滤器要依赖该对象来构造，所以创建一个先 -->
	<bean name="redisOperationsSessionRepository"
		class="org.springframework.session.data.redis.RedisOperationsSessionRepository">
		<constructor-arg ref="jedisConnectionFactory" />
		<property name="defaultMaxInactiveInterval" value="86400" />
	</bean>

	<!-- 这个是Session策略过滤器，即将容器原有的Session持久化机制，代替为Spring的 Redis持久化Session机制。 -->
	<!-- 注意，这个名字与 web.xml里的targetBean的下value是要一致的。 -->
	<bean name="springSession" class="org.springframework.session.web.http.SessionRepositoryFilter">
		<constructor-arg ref="redisOperationsSessionRepository" />
		<property name="httpSessionStrategy" ref="cookieHttpSessionStrategy" />
	</bean>
	
	<!-- email发送服务器-->
    <bean id="mailSender" class="com.ssm.mail.MailSender" scope="prototype">
        <property name="environment" value="${env.code}"/>
        <!-- <property name="tryTimes" value="${email.tryTimes}"/>
        <property name="host" value="${email.host}" />
        <property name="port" value="${email.port}" /> -->
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
            </props>
        </property>
    </bean>
	
	<!-- 线程池 -->
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数 -->
        <property name="corePoolSize" value="5"/>
        <!-- 最大线程数 -->
        <property name="maxPoolSize" value="250"/>
        <!-- 队列最大长度 -->
        <property name="queueCapacity" value="1000"/>
        <!-- 线程池维护线程所允许的空闲时间，默认为60s -->
        <property name="keepAliveSeconds" value="120"/>
    </bean>

	<!-- 扫描 mapper -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="*.**.mapper"></property>
	</bean> -->
	
    <bean id="mapperScannerConfigurer" class="com.ssm.mybatis.spring.MapperScannerConfigurer">
        <property name="basePackage" value="*.**.mapper"/>
        <property name="processPropertyPlaceHolders" value="true"/>
        <property name="propertiesMap">
            <map>
                <entry key="mappers" value="com.ssm.mybatis.common.Mapper"/>
                <entry key="IDENTITY" value="${mybatis.identity}"/>
                <entry key="seqFormat" value="{3}_s.nextVal"/>
                <entry key="enableMethodAnnotation" value="true"/>
            </map>
        </property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="configFile" value="/config.properties"/>
    </bean>
	
	<!-- 使用tk.mybatis通用工具包    必须这样扫描 -->
	<!-- <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="*.**.mapper"></property>
		<property name="markerInterface" value="tk.mybatis.mapper.common.Mapper"/>
	</bean> -->
   
    <!-- lock -->
    <bean id="distributeLockTemplate" class="com.ssm.lock.impl.DistributedLockFactoryBean">
        <property name="mode" value="MULTIPLE"/>
    </bean>
</beans>